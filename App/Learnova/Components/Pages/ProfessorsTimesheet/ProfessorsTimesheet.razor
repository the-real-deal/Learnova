@page "/ProfessorsTimesheet"
@using Learnova.Context
@using Learnova.Entities
@using Microsoft.EntityFrameworkCore


<MudText Class="ml-5" Typo="Typo.h2">Lezioni Programmate</MudText>
<MudContainer Class="mt-2">
    <MudSelect  @bind-Value="selectedTeacher"  T="Professori"  Label="Seleziona professore">
        @foreach (Professori professore in prof.OrderBy(x => x.Cognome))
        {
            <MudSelectItem T="Professori"  Value="@professore">
                @($"{@professore.Nome} {@professore.Cognome}")
            </MudSelectItem>
        }
    </MudSelect>




    <MudTable Items="ore">
        <HeaderContent>
            <MudTh>Ora</MudTh>
            <MudTh>Lunedì</MudTh>
            <MudTh>Martedì</MudTh>
            <MudTh>Mercoldì</MudTh>
            <MudTh>Giovedì</MudTh>
            <MudTh>Venerdì</MudTh>
            <MudTh>Sabato</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Ora">
                @(context+"°")
            </MudTd>
            @for (int k=0; k<=5; k++)
            {
                var tmp = @lezione.FirstOrDefault(x => x.Giorno.Equals(k) && x.Ora.Equals(context) && x.CodiceProfessores.Any(y => y.Cf == selectedTeacher.Cf));
                @if (tmp is not null)
                {
                    <MudTd>
                        <MudPaper Outlined="true" >
                            <MudText Align="Align.Center">@(tmp.CodiceClasseNavigation.CodicePianoStudioNavigation.Anno + tmp.CodiceClasseNavigation.Sezione)</MudText>
                            <MudText Align="Align.Center">@(tmp.CodiceClasseNavigation.CodicePianoStudioNavigation.CodiceIndirizzoNavigation.Nome)</MudText>
                        </MudPaper>
                    
                    </MudTd>
                }
                else
                {
                    <MudTd>@("/")</MudTd>
                }
           
            }
        </RowTemplate>
    </MudTable>
</MudContainer>


@code
{
    public IQueryable<LezioniProgrammate> lezione { get; set; }
    public static IQueryable<Professori> prof { get; set; }
    public Professori selectedTeacher { get; set; }
    public List<int> ore { get; set; }

    protected override void OnInitialized()
    {
        MyDbContext dbContext = new MyDbContext();

        lezione = dbContext.LezioniProgrammates.Include(x => x.CodiceProfessores)
            .Include(x => x.CodiceClasseNavigation)
            .Include(x => x.CodiceClasseNavigation.CodicePianoStudioNavigation)
            .Include(x => x.CodiceClasseNavigation.CodicePianoStudioNavigation.CodiceIndirizzoNavigation);
        prof = lezione.Select(x => x.CodiceProfessores).SelectMany(x => x).Distinct();
        ore = dbContext.LezioniProgrammates.Select(x => x.Ora).Distinct().ToList();
        ore.Sort();
        selectedTeacher = prof.First();
    }

    

    public string WeekDay(int s)
    {

        string o = "";
        switch (s)
        {
            case 0:
                o = "Lunedì";
                break;
            case 1:
                o = "Martedì";
                break;
            case 2:
                o = "Mercoledì";
                break;
            case 3:
                o = "Giovedì";
                break;
            case 4:
                o = "Venerdì";
                break;
            case 5:
                o = "Sabato";
                break;
        }

        return o;
    }
}
