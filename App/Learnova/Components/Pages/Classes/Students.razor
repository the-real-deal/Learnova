@page "/Students"
@using Learnova.Context
@using Learnova.Entities
@using Microsoft.EntityFrameworkCore
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject Account User

<MudText Class="ml-5" Typo="Typo.h2">Classi e studenti</MudText>
<MudContainer Class="mt-2">
    <MudSelect @bind-Value="selectedClass" T="Classi" Label="Seleziona classe">
        @foreach (Classi classe in classi.OrderBy(x => x.Id))
        {
            <MudSelectItem T="Classi" Value="@classe">
                @($"{classe.CodicePianoStudioNavigation.Anno} {classe.Sezione}")
            </MudSelectItem>
        }
    </MudSelect>
</MudContainer>

@if (studenti?.Any() == true)
{
    <MudPaper Class="p-2" Elevation="2">
        <MudList T="Studenti" Dense="true">
            @foreach (var s in studenti.OrderBy(x => x.Cognome))
            {
                //aaaaaNot following the DRY rule...
                if (User.CodiceRuolo == 1 || User.CodiceRuolo == 2)
                {
                    <MudListItem T="Studenti" @onclick="() => SelectStudent(s)" Class="student-item">
                        <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mud-avatar-text">
                            @($"{(string.IsNullOrEmpty(s.Cognome) ? "" : s.Cognome[0])}{(string.IsNullOrEmpty(s.Nome) ? "" : s.Nome[0])}".ToUpper())
                        </MudAvatar>
                        <MudText Typo="Typo.h5" Class="ml-3">
                            @($"{s.Cognome} {s.Nome}")
                        </MudText>
                    
                        <MudSpacer />
                        <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowRight" Color="Color.Default" />
                        <MudText Typo="Typo.subtitle2" Class="ml-3">
                            Mostra Voti
                        </MudText>
                    </MudListItem>
                }
                else
                {
                    <MudListItem T="Studenti" Class="student-item">
                        <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mud-avatar-text">
                            @($"{(string.IsNullOrEmpty(s.Cognome) ? "" : s.Cognome[0])}{(string.IsNullOrEmpty(s.Nome) ? "" : s.Nome[0])}".ToUpper())
                        </MudAvatar>
                        <MudText Typo="Typo.h5" Class="ml-3">
                            @($"{s.Cognome} {s.Nome}")
                        </MudText>
                    </MudListItem>
                }
            }
        </MudList>
    </MudPaper>
}

@code
{
    public IQueryable<Studenti> studenti { get; set; }
    public IQueryable<Classi> classi { get; set; }
    public Classi selectedClass { get; set; }

    protected override void OnInitialized()
    {
        MyDbContext dbContext = new MyDbContext();
        classi = dbContext.Classis.Include(x=>x.CodicePianoStudioNavigation);
        studenti = dbContext.Studentis
            .Where(x => x.CodiceClasse == selectedClass.Id);
        if (User.CodiceRuolo == 3 || User.CodiceRuolo == 4)
        {
            selectedClass = dbContext.Classis.First(x=>x.Id==dbContext.Studentis.First(s => s.CodiceAccount==User.Username).CodiceClasse);
        }
        else
        {
            selectedClass = classi.First();
        }
    }

    private async Task SelectStudent(Studenti student)
    {
            NavigationManager.NavigateTo($"/Subjects/{student.Cf}");
    }
}
