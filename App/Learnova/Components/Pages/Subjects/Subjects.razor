@page "/Subjects/{CF}"
@using Learnova.Commons
@using Learnova.Context
@using Learnova.Entities
@using Microsoft.EntityFrameworkCore
@inject IDialogService DialogService
@inject Account User

<MudText Typo="Typo.h3" Class="mb-4">Overview Materie</MudText>
<MudContainer  MaxWidth="MaxWidth.Large" Class="m-4 d-flex">
    <MudPaper Class="d-flex flex-column px-5 py-5" Elevation="2" >
        <MudText Align="Align.Center" Inline="true" Typo="Typo.h5">
            <strong>MEDIA GENERALE</strong> 
            <br/>
        </MudText>
        <MudChart   ChartType="ChartType.Donut" InputData="@(new[] {  10 - @overallAverage.Value, overallAverage.Value })">
            <CustomGraphics  >
                <text class="donut-inner-text "   x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="50">@(overallAverage.Value.ToString("N2"))</text>
            </CustomGraphics>
        </MudChart>
        
        
    </MudPaper>
    
    <MudContainer Class="ml-2" MaxWidth="MaxWidth.Large">
        
        <MudExpansionPanels >
            @foreach (Materie m in (Student.CodiceClasseNavigation.CodicePianoStudioNavigation.CodiceMateria))
            {
                <MudExpansionPanel>
                    <TitleContent>
                        <MudContainer Class="d-flex">
                            <MudAvatar Elevation="2" Size="Size.Large"  Class="d-flex" Color="Color.Primary">@m.Nome.Substring(0,3).ToUpper()</MudAvatar>
                            <MudContainer  Class="p-5">
                                <MudText Class="p-5">@m.Nome</MudText>
                            </MudContainer>
                            @if (CheckPermission(m))
                            {
                                <MudButton OnClick="@(()=> AddGrade(@m))" Color="Color.Primary">Aggiungi Voto</MudButton>
                                
                            }
                        </MudContainer>
                    </TitleContent>
                    <ChildContent>
                        <MudTable Items="@(Student.Votis.Where(x => x.CodiceMateriaNavigation.Id==m.Id))">
                            <HeaderContent>
                                <MudTh>Voto</MudTh>
                                <MudTh>Descrizione</MudTh>
                                @if (CheckPermission(m))
                                {
                                    <MudTh></MudTh>
                                }
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudAvatar Color="Color.Secondary">@context.Cifra.ToString("N2")</MudAvatar>
                                </MudTd>
                                <MudTd>@context.Descrizione</MudTd>
                                @if (CheckPermission(m))
                                {
                                    <MudTd>
                                        <MudButton OnClick="@(() => EditGrade(@context))" Color="Color.Tertiary">Modifica</MudButton>
                                        <MudButton OnClick="@(() =>Delete(@context))" Color="Color.Error">Elimina</MudButton>
                                    </MudTd>
                                }
                            </RowTemplate>

                        </MudTable>
                        
                    </ChildContent>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudContainer>

</MudContainer>

@code {
    [Parameter] public string CF { get; set; }
    public Studenti Student { get; set; }
    private ChartOptions options = new ChartOptions();
    public MyDbContext Db { get; set; }
    private double? overallAverage;
    private string[] subjects = { "Matematica", "Italiano", "Latino", "Informatica","Storia" };

    private bool CheckPermission(Materie m)
    {
        return (User.CodiceRuolo == 1 || (User.CodiceRuolo == 2 && Db.Materies.Include(x => x.CodiceProfessores).First(x => x.Id == m.Id).CodiceProfessores.Any(x => x.CodiceAccount == User.Username)));
    }
    
    protected override void OnInitialized()
    {
        Db = new MyDbContext();
        Student = Db.Studentis.Include(x => x.Votis)
            
            .Include(x => x.CodiceClasseNavigation)
            .Include(x => x.CodiceClasseNavigation.CodicePianoStudioNavigation)
            .Include(x => x.CodiceClasseNavigation.CodicePianoStudioNavigation.CodiceMateria)
            .First(x => x.Cf == CF);
        CalculateOverall();
    }

    private async Task EditGrade(Voti g)
    {
        DialogParameters parameters = new DialogParameters<GradeDialog>
        {
            {x => x.grade, g}
        };
        var dialogReference = await DialogService.ShowAsync<GradeDialog>("Edit",parameters);
        var result = await dialogReference.Result;
        if (!result.Canceled)
        {
            Voti edited = result.Data as Voti;
            g.Cifra = edited.Cifra;
            g.Descrizione = edited.Descrizione;
            g.Data = edited.Data;
            await Db.SaveChangesAsync();
        }
        CalculateOverall();
        StateHasChanged();
        
    }

    private async Task AddGrade(Materie subject)
    {
        DialogParameters parameters = new DialogParameters<GradeDialog>
        {
            {x => x.grade, new Voti()
            {
                CodiceMateria = subject.Id,
                CodiceStudente = Student.Cf
            }}
        };
        var dialogReference = await DialogService.ShowAsync<GradeDialog>("Add",parameters);
        var result = await dialogReference.Result;
        if (!result.Canceled)
        {
            Voti? added = result.Data as Voti;
            await Db.Votis.AddAsync(new Voti()
            {
                Cifra = added.Cifra,
                Descrizione = added.Descrizione,
                Data = added.Data,
                CodiceMateria = added.CodiceMateria,
                CodiceStudente = Student.Cf,
            });
            await Db.SaveChangesAsync();
        }
        CalculateOverall();
        StateHasChanged();
    }

    private void Delete(Voti grade)
    {
        Db.Votis.Remove(grade);
        Db.SaveChanges();
        CalculateOverall();
    }

    private void CalculateOverall()
    {
        overallAverage = Student.Votis.Count==0? 0 :Student.Votis.Average(x => x.Cifra);
    }


}