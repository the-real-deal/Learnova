@page "/Calendar"
@using Learnova.Commons
@inject IDialogService DialogService

<MudContainer  Fixed="true">
    <MudText Class="pa-3" Typo="Typo.h3">Calendario Eventi @items.Select(x=> x.item).ToList()[items.Count-1].Start.ToString() @items.Select(x=> x.item).ToList()[items.Count-1].End.ToString() </MudText>
    <MudCalendar Items="items.Select(x => x.item)" @ref="@calendar"  Use24HourClock="true" Elevation="4" Class="pa-3" T="CalendarItem" CellClicked="@(e => CellClicked(items.Select(x=> x.item).Where(x=> x.Start.DayOfYear==e.Date.DayOfYear).ToList()))" Color="Color.Tertiary">
            <ToolbarContent>
                @if (isAdmin)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddEvent">Aggiungi</MudButton>
                }
            </ToolbarContent>
    </MudCalendar>
</MudContainer>
@code {

    private bool isAdmin = true;
    private MudCalendar<CalendarItem> calendar = new MudCalendar<CalendarItem>();
    
    private List<CalendarEvent> items =new()
    {
        new CalendarEvent()
        {
            id = 0,
            description = "BBBBAAAAALLLOOOO",
            item = new CalendarItem()
            {
                Start = DateTime.Today.AddHours(6).AddDays(2),
                End = DateTime.Today.AddHours(12).AddDays(2),
                Text = "Altro"
            }
        },
        new CalendarEvent()
        {
            id = 0,
            description = "Verifica victor mainezz",
            item = new CalendarItem()
            {
                Start = DateTime.Today.AddHours(6).AddDays(-7),
                End = DateTime.Today.AddHours(12).AddDays(-7),
                Text = "Verifica"
            }
        },
        new CalendarEvent()
        {
            id = 0,
            description = "Mario",
            item = new CalendarItem()
            {
                Start = DateTime.Today.AddHours(6).AddDays(-12),
                End = DateTime.Today.AddHours(12).AddDays(-12),
                Text = "Gita"
            }
        }
        
        
    };
    private Task CellClicked(List<CalendarItem> i)
    {
        
        DialogParameters parameters = new DialogParameters<CalendarDialog>
        {
            {x => x.events,i.Select(y => items.Where(x => x.item.Start==y.Start)).SelectMany(x => x).Distinct().ToList()}
        };        
        return DialogService.ShowAsync<CalendarDialog>("CalendarCell",parameters);
    }

    

    private async Task AddEvent()
    {  
        var dialogReference = await DialogService.ShowAsync<AddEventDialog>("EventAdded");
        
        var result = await dialogReference.Result;
        if (!result.Canceled)
        { 
            
            CalendarEvent i = (CalendarEvent)result.Data;
            if (i is not null)
            {
                items.Add(new CalendarEvent()
                {
                    id = items.Select(x => x.id).Max() + 1,
                    description = i.description,
                    item = i.item
                });

            }
        }
        StateHasChanged();
        calendar.Refresh();
        
    }

    
}